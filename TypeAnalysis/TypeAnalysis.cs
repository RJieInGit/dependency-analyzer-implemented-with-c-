
/*///////////////////////////////////////////////////////////////////////////////
// StrongComponent.cs     build a TypeTable                                   //                               
// version                 1.0                                               // 
// Language                C#,                                               // 
// Platform                .Net Framework 4.6.1 WIN10, VS2017 Community      // 
// Application            Dependency analysis                                //
//                                                                           //
// Author                  Ren Jie , Master in Computer Science              //
//                         Syracuse University                               //
//                         (315) 289 0047 jren21@syr.edu                     //
///////////////////////////////////////////////////////////////////////////////
/*
 * Module Operations
 * ======================
 * Build the TypeTable that includes all the user defined Types from a given dirtpry and its subdirtory
 * 
 *   
 * Maintenance History
 * ======================
 * ver1.0 : 11/2
 * - first release
 * 
 * Planned Modifications:
 * ----------------------
 * - 
 * *********************************************************************************
 * public interfaces:           TypeAnalysis analyzer=new TypeAnalysis();        //constructor
 *                              Static TypeTable buildTypeTable(String[] args)   // the arg[0] should be the dirtory path
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using typeinfo;
using CodeAnalysis;
using Lexer;
using fileManger;

namespace typeanalysis
{
    public class TypeAnalysis
    {
       
        public static TypeTable buildTypeTable(String[] args)                                             // the input should be the valid path and file names
        { //Console.Write("\n  Demonstrating building typeTable");
            //Console.Write("\n ======================\n")
            //ShowCommandLine(arg);
            TypeTable table=new TypeTable();
            List<string> files = FileManger.ProcessDirtory(args);
            Repository r = new Repository();
                
            foreach (string file in files)
            {
                if (System.IO.Path.GetFileName(file).Contains("AssemblyInfo.cs"))                               // ignore all the .cs file that are generated by visual studio
                    continue;
                Console.Write("\n  Processing file {0}\n", System.IO.Path.GetFileName(file));                   //print on the console which file is being processed
                ITokenCollection semi = Factory.create();
                BuildTpyeTablePareer builder = new BuildTpyeTablePareer(semi);
                Parser parser = builder.build();
                Repository.changeFileName(System.IO.Path.GetFileName(file));                                     //update the current file name
                //semi.displayNewLines = false;
                if (!semi.open(file as string))
                {
                    Console.Write("\n  Can't open {0}\n\n", file);
                    continue;
                }

               // Console.Write("\n  Type and Function Analysis");
               // Console.Write("\n ----------------------------");



                try
                {
                    while (semi.get().Count > 0)
                        parser.parse(semi);
                }
                catch (Exception ex)
                {
                    Console.Write("\n\n  {0}\n", ex.Message);
                }

                semi.close();
            }
            Console.Write("\n\n");
            
            
            return Repository.getInstance().table;

        }
    }
#if testTypeAnalysis
    class test{
        public static void Main (String[] args)
        {
            TypeTable table = TypeAnalysis.buildTypeTable(args);
            table.display();
        }
        
    }
#endif
}

