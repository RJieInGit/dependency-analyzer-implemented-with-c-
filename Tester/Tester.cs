////////////////////////////////////////////////////////////////////////////
// TypeTable.cs  This package is to demonstrate the runing result of proj3//
// version 1.0                                                            //
// Language: C#    Platform: .net 4.6.2  IDE visual studio                //
// Application: Dependency analysis                                       //
// Author: Ren Jie  email:jren21@str.edu   Syrcause University            //
//                  phone: 315-289-0047                                   //
////////////////////////////////////////////////////////////////////////////

/* model operation:
 * ************************
 * This Tester package provides a tool to automaticly run and demostrate the proj3 running result
 * The default dirtory path used in this tester is "../../../" which is the root dirtory of project3
 * 
 * 
 * 
 *                       TO TAs !!!!!!! :            WATCH HERE !!!!!!!!!!!!!
 *                       If you want to apply other test cases, please set the path field to the root dirtory path of your test cases in Main function !!!!!!!!!!!!!!!!!!!!!
 * 
 * 
 * 
 * Public interfaces:
 * ***********************
 * public static void demoRequire3()
 * public static void demoRequire4()
 * public static void demoRequire5()
 * public static void demoRequire6()
 * Maintenance History: 
 * ///////////////////////
 * alpha test 1.0, first release 10/03/2018
 * */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using fileManger;
using typeanalysis;
using typeinfo;
using depAnalysis;
using strongComponent;
using CsGraph;

namespace tester
{
    class Tester
    {
        public static String path{get;set;}            //change this field to your test cases

        public static void demoRequirement3()
        {
            Console.WriteLine("Now demostrating requirement 3, showing all the .cs package in the solution");
            Console.WriteLine("--------------------------------------------------------------------------------------------------------------------------------------------------------------------");
            List<String> files = FileManger.ProcessDirtory(path);
            foreach (String file in files)
            {
                if (file.Contains("AssemblyInfo.cs"))                   //discard all the amssemblyInfo.cs file which is generated by visual studio
                    continue;
                Console.WriteLine(file);
            }
            Console.WriteLine("finish demostrating requirement3 ");
            Console.WriteLine("-------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n");
        }
        public static void demoRequirement4()
        {
            Console.WriteLine("Now demostrating requirement 4, evaluate all the dependencies between files in a specified file set\n");
            Console.WriteLine("As a demostrating, I will run the analysis on this project dirtory,\n and all the .cs file under this dirtory and subdirtory will be analyzed");
            Console.WriteLine("Build a TypeTable and display it");
            Console.WriteLine("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
            TypeAnalysis analyzer = new TypeAnalysis();
            String[] path_ = { Tester.path };
            TypeTable table = TypeAnalysis.buildTypeTable(path_);                                              // calling the wraped function to get the typetable
            table.display();
            Console.WriteLine("finish demostrating requirement4 ");
            Console.WriteLine("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n");
        }
        public static void demoRequirement5()
        {
            Console.WriteLine("Now demostrating requirement 5, Run dependency analysis base on all the user-defined types");
            Console.WriteLine("implemented rules and actions to detect user defined type" +
                "\n public class DetectClass : ARule" +
                "\n public class DetectEnum : ARule" +
                "\n public class DetectNamespace : ARule" +
                "\n public class DetectDelegate : ARule" +
                "\n  public class DetectAlias : ARule" +
                "\n  public class DetectFunction : ARule" +
                "\n\n And Also designed a facility to detect same type name that defined in different namespace");
            Console.WriteLine("As a demostrating, I will run the analysis on this project dirtory,\n and all the .cs file under this dirtory and subdirtory will be analyzed");
            Console.WriteLine("Run a dependency analysis and display the result");
            Console.WriteLine("------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
            DepAnalysis depAnalyser = new DepAnalysis();
            depAnalyser.setpath(path);                                                                  // set path the the project3 dirtory;
            depAnalyser.analyze();                                                                             
            depAnalyser.display();                                                                            // calling the wraped function  to run dependency analysis
            Console.WriteLine("finish demostrating requirement5");
            Console.WriteLine("----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n");
        }
        public static void demoRequirement6()
        {
            Console.WriteLine("Now demostrating requirement 6, Run Strong connected component analysis ");
            Console.WriteLine("This ssc analysis is based on tarjon algorithm");
            Console.WriteLine("Now analysis the scc relation between pj3,  This project 3 only contains 1 scc relation which is toker.cs and semi.cs");
            
            DepAnalysis analyzer = new DepAnalysis();
            analyzer.setpath(path);
            analyzer.analyze();
            Dictionary<String, HashSet<String>> dep = analyzer.DependencyTable;
            StrongComponent scc = new StrongComponent();
            scc.buildgraph(dep);
            List<List<String>> res = scc.tarjan();
            foreach (List<String> list in res)
            {
                Console.Write("{");
                foreach (String file in list)
                {
                    Console.Write(" [" + file + "], ");
                }

                Console.WriteLine(  "}");
            }
         
        }
       
        static void Main(string[] args)
        {    /*to TAs : change the path here to the path of your testcases root directory. 
            be care that it will run analysis on all the files in the subdirtory so if you just copy the test case to the project dirtory,
            It will analysis both test cases and the project3 file!!!!!!
            */
            if (args.Length == 0)
                path = "../../../";
            else
                path = args[0];


            demoRequirement3();                                             
            demoRequirement4();
            demoRequirement5();
            demoRequirement6();
            Console.WriteLine("finish all demostrating! All requirement meeted.\n\n");
           
            Console.WriteLine("The default path is The root dirtory of project3. \n " +
                "if you want to run your testcases, please change the  path field in the tester.cs  \n");
            Console.WriteLine("if you copy the test cases to the root dictory,\n" +
                "it will analysis all the files under all subdiretory including prj3 files, \n" +
                "which would probably makes you harder to check your test case running result");

        }
    }
}
